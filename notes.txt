things are getting confusing (in terms of testing and building this project while using React components and ES6) so here are some notes to self.

some of the important node modules and why we need them:

1. babel/core -> this is needed to use Babel to transpile the ES6 code, namely module exports. Even though you can use script=module within HTML pages now,
if you want to do testing with Node (Node doesn't have native support for module importing currently AFAIK), or use Webpack to bundle the scripts, as well 
as if you have React components and use JSX, Babel is needed. unfortunately, you also need a few other Babel libraries to use with core to do the aforementioned things.

2. babel/node -> to use Babel with Node (like for testing with jasmine and enzyme)

3. babel/preset-XYZ -> these presets tell what to transpile to?

4. babel-loader -> for webpack 

5. babel-register -> transpiles files on the fly by binding Node's require method.

Since we are bundling the Javascript, the old Javascript to initiate the game originally in 
index.html can now be moved to the entry point of the bundle. Note that we use jQuery to wait 
until the page has loaded before running the bundle!

===========================================

To do:

write tests confirming basic things, like if an enemy gets obliterated does the enemy units array change appropriately?
i.e. check count, contents 

when a player unit gets defeated, make sure it gets removed from the player units array! I don't think it currently does
this. 

rotate units properly when they move in a certain direction. 

try to redefine functions in utils.js without hardcoding numbers. 

add 3d ships and integrate webgl!

---- new idea:
	- use the 3d canvas only and get rid of the grid 
	- give each unit a radius that represents how much they can move in one turn and area of attack
	- can draw a circle showing unit's radius using the 3d canvas also 
	- for the enemy ai, we can approximate circles within the grid and choose paths that way (so like a grid)
	- for clicking on specific units, keep track of units via a bounding box? i.e. on click, convert 2d units 
	  to 3d units. store units by coordinates of bounding box, make sure to note the size of the unit?
